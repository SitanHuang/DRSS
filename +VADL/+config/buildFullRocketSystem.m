function sys = buildFullRocketSystem(sys)

sys = sys ...
  .subjectTo(sys.configParams.gravityDynamics) ...
  ... Ascent-specific:
  .subjectTo(sys.configParams.launchRail) ...
  .subjectTo(sys.configParams.motorDynamics) ...
  .subjectTo(sys.configParams.rocketDynamics) ...
  ... Descent-specific:
  .subjectTo(sys.configParams.main) ...
  .subjectTo(sys.configParams.rocketDrogueDescentDrag) ...
  .subjectTo(sys.configParams.rocketMainDescentDrag) ...
  ... Special dynamics:
  .subjectTo(sys.configParams.jettisonEvent) ...
  .subjectTo(sys.configParams.constantThetadDynamics) ...
  ... Triggers:
  .subjectTo(sys.configParams.apogeeListener) ...
  .subjectTo(sys.configParams.disableAscentDynamics) ...
  .subjectTo(sys.configParams.mainDeploymentListener) ...
  .subjectTo(sys.configParams.disableDrogueDynamics) ...
  .subjectTo(sys.configParams.jettisonListener);

if isfield(sys.configParams, 'disableJettison') && sys.configParams.disableJettison
  sys.configParams.jettisonListener.setAlitude(-inf);
end

if ~isfield(sys.configParams, 'disableDrogue') || ~sys.configParams.disableDrogue
  sys = sys.subjectTo(sys.configParams.drogue);
end

% Calculate geometry based on system length with massing now available:
sys.configParams.rocketDynamics.recalcTransientParameters(sys);

sys.configParams.ssm = (sys.configParams.rocketDynamics.aerodynamicProfile.CP - sys.cgX) / sys.configParams.rocketDynamics.aerodynamicProfile.D;