
%% launchDaySensitivityAnalysis.m
% Sensitivity analysis for VADL launch vehicle under varying conditions
clear; clc; close all;
uc = DRSS.util.unitConv;

%% Configuration Parameters
launchAngle = 1:3:10; % Ballast mass range [lbm]
wind_speed_mph = [5 11 15 20]; % Wind speeds [mph]
temps_F = 55:5:65; % Temperature range [F]
numCases = length(launchAngle)*length(wind_speed_mph)*length(temps_F);

%% Preallocate Results Matrices
apogeeResults = zeros(length(launchAngle), length(wind_speed_mph), length(temps_F));

%% Main Simulation Loop
fprintf('Running %d simulation cases:\n', numCases);
progressBar = waitbar(0, 'Starting simulations...');

for laInd = 1:length(launchAngle)

  % Base system configuration
  sysConfig = struct( ...
    'disableJettison', false, ...
    'noMotor', false, ...
    'motorLossFactor', 0.965, ...
    'noBallast', false, ...
    'launchAngle', launchAngle(laInd), ...
    'launchSiteElevation', 800, ...
    'launchSiteTemp', 60, ...
    'launchSitePressurePa', 91550, ...
    'motorOverride', 'L1720', ...
    'launchRailEffectiveTravel', 12, ... % ft
    'windSpeed', 7, ...
    'driftCalcWindSpeed', 7 ...
  );

  for wIdx = 1:length(wind_speed_mph)
    for tIdx = 1:length(temps_F)
      % Update environmental parameters
      windSpeed = [[0, 11]; [1020, 12]; [4075, 11]; [5561, 13]];
      windSpeed(:, 2) = windSpeed(:, 2) .* wind_speed_mph(wIdx) / 10;
      sysConfig.windSpeed = windSpeed;
      sysConfig.driftCalcWindSpeed = wind_speed_mph(wIdx);
      sysConfig.launchSiteTemp = temps_F(tIdx);

      % Solve trajectory
      sys = VADL.config.getMainSys(sysConfig);
      solver = DRSS.solver.MatlabODESolver(sys);
      [states, ~] = solver.configureODE('RelTol',1e-12, 'MaxStep', 0.02).setTimeSpan([0 30]).overrideODEFunc(@ode113).solve();
      apogeeResults(laInd,wIdx,tIdx) = max(states.y)*uc.m_to_ft;

      % Update progress
      progress = ((laInd-1)*length(wind_speed_mph)*length(temps_F) + ...
        (wIdx-1)*length(temps_F) + tIdx)/numCases;
      waitbar(progress, progressBar, sprintf('Progress: %.1f%%', progress*100));
    end
  end
end
close(progressBar);

%% Create unified figure with multi-variable encoding
fig = figure('Position', [100 100 1000 750],...
  'DefaultAxesFontName', 'Helvetica',...
  'DefaultTextFontSize', 12);

% Create main analysis axis
axMain = axes('Position', [0.12 0.15 0.7 0.75]);
hold(axMain, 'on');
grid(axMain, 'on');

% Visual encoding parameters
tempPalette = [0.16 0.29 0.55;  % 80째F - Deep blue
  0.20 0.60 0.40;   % 90째F - Emerald
  0.80 0.25 0.25];  % 100째F - Vermilion
windStyles = {'-', '--', '-.', ':', '-'};
windLevels = wind_speed_mph;

% Plot all combinations with systematic encoding
lineHandles = gobjects(length(windLevels), length(tempPalette));
for tIdx = 1:length(temps_F)
  for wIdx = 1:length(windLevels)
    plotData = squeeze(apogeeResults(:,wIdx,tIdx));
    lineHandles(wIdx,tIdx) = plot(axMain, launchAngle, plotData,...
      'Color', tempPalette(tIdx,:),...
      'LineStyle', windStyles{wIdx},...
      'LineWidth', 2.5,...
      'Marker', 'none');
  end
end

% Reference system
refLines = struct(...
  'y4200', yline(axMain, 4200, 'b-.', 'LineWidth', 4),...
  'y4000', yline(axMain, 4000, 'r-.', 'LineWidth', 4));

% Axis configuration
set(axMain, 'XLim', [0 10],...
  'YLim', [floor(min(apogeeResults,[],'all')/100)*100,...
  ceil(max(apogeeResults,[],'all')/100)*100],...
  'GridAlpha', 0.2,...
  'LineWidth', 1.2);
xlabel(axMain, 'Launch Angle (deg)', 'FontWeight', 'bold');
ylabel(axMain, 'Apogee Altitude (ft)', 'FontWeight', 'bold');
title(axMain, 'VADL USLI Pre-flight Predictions',...
  'FontSize', 14, 'FontWeight', 'bold');

% Temperature legend (color coded)
axTemp = axes('Position', [0.83 0.60 0.15 0.30], 'Visible', 'off');
for tIdx = 1:length(temps_F)
  annotation('rectangle', [0.85 0.78-tIdx*0.08 0.03 0.03],...
    'FaceColor', tempPalette(tIdx,:),...
    'EdgeColor', 'none');
  annotation('textbox', [0.88 0.77-tIdx*0.08 0.1 0.05],...
    'String', sprintf('%d째F', temps_F(tIdx)),...
    'EdgeColor', 'none',...
    'FontSize', 10);
end

% Wind speed legend (line style)
axWind = axes('Position', [0.83 0.20 0.15 0.30], 'Visible', 'off');
for wIdx = 1:length(windLevels)
  annotation('line', [0.85 0.89], [0.46-wIdx*0.04 0.46-wIdx*0.04],...
    'Color', [0.3 0.3 0.3],...
    'LineStyle', windStyles{wIdx},...
    'LineWidth', 2);
  annotation('textbox', [0.90 0.43-wIdx*0.04 0.1 0.05],...
    'String', sprintf('%d mph', windLevels(wIdx)),...
    'EdgeColor', 'none',...
    'FontSize', 10);
end

% Reference legend
annotation('textbox', [0.82 0.05 0.15 0.10],...
  'String', {...
  sprintf('-- 4200 ft: Target altitude')},...
  'EdgeColor', 'none', ...
  'Color', 'b',...
  'FontSize', 9);
annotation('textbox', [0.82 0.0 0.15 0.10],...
  'String', {...
  sprintf('-- 4000 ft: NASA Requirement 2.1')},...
  'EdgeColor', 'none', ...
  'Color', 'r',...
  'FontSize', 9);

exportgraphics(fig, "competition_post_usli_variability.png", "Resolution", 900);