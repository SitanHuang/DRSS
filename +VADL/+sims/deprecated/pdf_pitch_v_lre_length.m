uc = DRSS.util.unitConv;

figure;

for LRElen = [11, 15]
  mainSys = VADL.config.getMainSys(struct( ...
    'disableJettison', false, ...
    'noMotor', false, ...
    'motorLossFactor', 0.965, ...
    'noBallast', true, ...
    'launchAngle', 5, ...
    'launchSiteElevation', 620, ...
    'launchSiteTemp', 82, ...
    'motorOverride', 'K1100', ...
    'launchRailEffectiveTravel', LRElen, ... % ft
    'windSpeed', 18 ...
    ... 'windModelLowSpeed', 17, ...
    ... 'windModelHighSpeed', 35, ...
    ... 'windModelTurbulence', 0.09, ...
    ... 'windModelFreq', 0.2 ...
  ));

  solver = DRSS.solver.MatlabODESolver(mainSys) ...
    .setCaptureResultantParameters(true) ...
    .configureODE('RelTol', 1e-6, 'MaxStep', 0.1) ...
    .overrideODEFunc(@ode15s);
  [resultantStates, resultantParameters] = solver.solve();

  LREind = find(resultantStates.t > mainSys.configParams.launchRail.t_launchRailButtonCleared, 1, 'first');

  v_LRE = mainSys.configParams.launchRail.v_launchRailExit .* uc.mps_to_fps;

  plot(resultantStates.t, rad2deg(resultantStates.theta), 'DisplayName', sprintf("%.0f ft effective rail travel; v_{LRE}=%.1f fps", LRElen, v_LRE), 'LineWidth', 2);
  hold on;
end

legend("Location", "Best");
ylabel("Pitch [deg]")
xlabel("Time [s]")
grid on
xlim([0 5])
yyaxis right;
plot(resultantParameters.t, resultantParameters.windSpeed ./ uc.mph_to_mps, 'b-', 'DisplayName', 'Simualted Wind')
ylabel("Wind Speed [mph]")
title("Pitch vs. Effective Rail Travel Length (1 ft motor clearance); 17 mph wind")